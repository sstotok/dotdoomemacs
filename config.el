;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; DO NOT EDIT THIS FILE DIRECTLY
;; This is a file generated from a literate programing source file located at
;; https://gitlab.com/zzamboni/dot-doom/-/blob/master/doom.org
;; You should make any changes there and regenerate it from Emacs org-mode
;; using org-babel-tangle (C-c C-v t)

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!

;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
;; (setq user-full-name "John Doe"
;;      user-mail-address "john@doe.com")

;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
;; (setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
;;       doom-variable-pitch-font (font-spec :family "sans" :size 13))

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
;; (setq doom-theme 'doom-one)

;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
;; (setq org-directory "~/org/")

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
;; (setq display-line-numbers-type t)

;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.

;; Well, macros to check system-name.
(defconst IS-SIDESTEP (string-prefix-p "sidestep" (system-name) t))
(defconst IS-IGL6301W (string-prefix-p "IGL6301W" (system-name) t))
(defconst IS-IGD1943U (string-prefix-p "igd1943u" (system-name) t))
(defconst IS-LOGE     (string-prefix-p "loge"     (system-name) t))

(setq-default evil-snipe-override-evil-repeat-keys nil
              doom-localleader-key ","
              doom-localleader-alt-key "M-,")

(setq user-full-name "Totok Sulistiomono"
      user-mail-address "stotok@kukisku.com")

(setq auth-sources '("~/.authinfo.gpg")
      auth-source-cache-expiry nil)      ; default is 7200 (2h)

(setq-default inhibit-x-resources t)

(set-language-environment 'utf-8)
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(setq utf-translate-cjk-mode nil
      locale-coding-system 'utf-8
      default-file-name-coding-system 'utf-8
      default-buffer-file-coding-system 'utf-8)

(setq create-lockfiles nil)

(setq auto-save-default nil
      make-backup-files nil
      create-lockfiles  nil)

(setq confirm-kill-emacs nil)

(set-fringe-mode '(0 . 0))            ; disable fringe, dun need it (no line wrap, etc)
(fset 'yes-or-no-p 'y-or-n-p)         ; replace yes/no prompts with y/n
(setq-default
 indent-tabs-mode nil                 ; use spaces (not tabs) for indenting
 truncate-lines t                     ; turn on truncating long lines
 require-final-newline t              ; always add a final newline
 delete-by-moving-to-trash nil        ; no need to go to OS's trash folder
 cursor-in-non-selected-windows nil   ; hide cursor in inactive windows
 select-enable-clipboard t            ; merge system's and emacs's clipboard
 ;;
 split-height-threshold 0             ; i only want vertical window splitting
 split-width-threshold nil            ; and dunwan horizontal window splitting
 ;; vi like scrolling
 scroll-step 1                        ; scroll just goes down 1 line even it hits the bottom
 scroll-margin 3                      ; 3 lines margin
 ;;
 ;; Build-In VC Package
 vc-follow-symlinks t                 ; don't ask for confirmation for opening symlinked file
 ;; Ref https://magit.vc/manual/magit/Performance.html
 ;; I don't use VC in addition to Magit, so disable it to keep it from performing
 ;; unnecessary work (see also another option just below)
 ;; vc-handled-backends nil ; disable due to causing vcs segment gone in doom-modeline
 ;; You can also disable its use for Git but keep using it when using another version
 ;; control system:
 ;; vc-handled-backends (delq 'Git vc-handled-backends)
 ;;
 ;; always just just left-to-right text
 bidi-display-reordering nil           ; makes emacs a bit faster for very long lines
 dabbrev-case-replace nil              ; make sure case is preserved when expanding
 )

(cond (IS-MAC
 ;; 1) Mac build-in Keyboard & Mouse preference:
 ;;    - Swapt [CapsLock] and [Control]
 ;;
 ;; 2) KeyRemap4MacBook:
 ;;    - Map [Option_R] to [Control_R] (only in Emacs, Terminal, X11)
 ;;    Note: This KeyRemap4MacBook no need anymore because I can remap
 ;;          option to control using mac-option-modifier below ...
 ;;
 ;; 3) Then below:
 ;;
 ;;    See https://emacsformacosx.com/tips
 ;;    Here's variables controlling the modifier keys:
 ;;
 ;;    - ns-alternate-modifier
 ;;    - ns-command-modifier
 ;;    - ns-control-modifier
 ;;    - ns-function-modifier
 ;;    - ns-option-modifier (just a different name for ns-alternate-modifier)
 ;;    - ns-right-alternate-modifier
 ;;    - ns-right-command-modifier
 ;;    - ns-right-control-modifier
 ;;    - ns-right-option-modifier
 ;;
 ;;    Each variable can be set to 'control, 'meta, 'alt, 'super, or 'hyper.
 ;;
 ;;    In addition ns-alternative-modifier (and ns-option-modifier) can be set to 'none,
 ;;    which lets it get interpreted by the OS so it can be used to input special
 ;;    characters.
 ;;
 ;;    The ns-right-* variables are set to 'left by default which makes them the same as
 ;;    their left counterpart.
 (setq mac-command-modifier      'meta      ; [Command] behaves like [Meta]
       mac-option-modifier       'control   ; [Option]  behaves like [Control]
       mac-right-option-modifier 'control)))

(setq-default frame-title-format (list (system-name) ":" "%f"))

;; add to config.el
(when-let (dims (doom-store-get 'last-frame-size))
  (cl-destructuring-bind ((left . top) width height fullscreen) dims
    (setq initial-frame-alist
          (append initial-frame-alist
                  `((left . ,left)
                    (top . ,top)
                    (width . ,width)
                    (height . ,height)
                    (fullscreen . ,fullscreen))))))

(defun save-frame-dimensions ()
  (doom-store-put 'last-frame-size
                  (list (frame-position)
                        (frame-width)
                        (frame-height)
                        (frame-parameter nil 'fullscreen))))

(add-hook 'kill-emacs-hook #'save-frame-dimensions)

(let ((alternatives '("doom-emacs-bw-light.svg")))
   ;;((alternatives '("doom-emacs-color.png" "doom-emacs-bw-light.svg")))
  (setq fancy-splash-image
        (concat doom-private-dir "splash/"
                (nth (random (length alternatives)) alternatives))))

;; if you don't need widget function, you can remove-hook it
;; see +doom-dashboard-functions at modules/ui/doom-dashboard/config.el
;;(remove-hook '+doom-dashboard-functions #'doom-dashboard-widget-banner)
;;(remove-hook '+doom-dashboard-functions #'doom-dashboard-widget-shortmenu)
(remove-hook '+doom-dashboard-functions #'doom-dashboard-widget-loaded)
;; (remove-hook '+doom-dashboard-functions #'doom-dashboard-widget-footer)

(defvar quotes
  '("There are approximately 100,000 hairs on average human head"
    "At any given moment, about 0.7% of the people in the world are drunk"
    "It takes an average person 7 minutes to fall asleep"
    "If you can't explain it simply, you don't understand it well enough"
    "The world is changed by examples, not by opinions"
    "When you talk, you spray around 2.5 microscopic saliva droplets per word"
    "An apple in the morning will keep you more awake than a cup of coffee"
    "You miss 100% of the shots you never take"
    "To the man who only has a hammer, everything he encounters begins to look like a nail"
    "We are what we repeatedly do; excellence, then, is not an act but a habit"
    "A wise man gets more use from his enemies than a fool from his friends"
    "Iâ€™d rather live with a good question than a bad answer"
    "Imitation is suicide"
    "Do what you must, and your friends will adjust"
    "I wish I was an octopus, so I can slap eight people at once"
    "Doing nothing is hard, you never know when you're done"
    "When nothing is going right, go left"
    "After (M)onday and (T)uesday comes WTF!"
    "I could agree with you, but then we'd both be wrong"
    "I hear and I forget, I see and I remember. I do and I understand"
    "Every accomplishment starts with the decision to try"
    "Rule#1: There's always a dame"
    "Rule#2: Someone always gets hurt"
    "Rule#3: Reality is stranger than fiction"
    "Love is like war, easy to begin but hard to end"
    "Opportunity does not knock, it presents itself when you beat down the door"
    "A diamond is merely a lump of coal that did well under pressure"
    "Action speaks louder than words"
    "Design for the future, because it will be here sooner than you think"
    "Repair what you can but when you must fail, fail noisily and as soon as possible"
    "Too much agrement kills a chat"
    "Don't talk about yourself; it will be done when you leave"
    "Laziness is nothing more than the habit of resting before you get tired"
    "When we talk to God, we're praying. When God talks to us, we're schizophrenic"
    "In the Beginning ... Was the command Line"
    "Life is 10% what happens to you and 90% how you react to it"
    "The secret of getting ahead is getting started"
    "Clarity is better than cleverness"
    "When in doubt, use brute force"
    "Teachers open the door. You enter by yourself"
    "Rome was not built in a day, neither in a thousand years"
    "Never trust a man when he's in love, drunk, or running for office"
    "User: the word computer professionals use when they mean 'idiot'"
    "Don't wish it were easier, wish you were better"
    "Remind yourself that 'done' is better than perfect"
    "Nothing lasts forever but at least we got these memories"
    "Don't tell people your plans. Show them your results."
    "In a room full of software architects, if two agree on the same thing, that's a majority"
    "If you automate a mess, you get an automated mess"
    "Don't document the problem, fix it"
    "If the code and the comments do not match, possibly both are incorrect"
    "I think it's a new feature. Don't tell anyone it was an accient"
    "When debugging, novices insert corrective code; experts remove defective code"
    "Adding manpower to a late software project makes it later!"
    "Better train people and risk they leave - than do nothing and risk they stay"
    "Good judgment comes from experience, and experience comes from bad judgment"
    "Don't comment bad code - rewrite it"
    "It's not a bug - it's an undocumented feature"
    "Copy and paste is a design error"))

(defun ttk/quotes ()
 (insert
  "\n"
  (propertize
   (+doom-dashboard--center
    +doom-dashboard--width
    (nth (random (length quotes)) quotes))
   'face 'doom-dashboard-loaded))
 "\n")

;; (setq mybanner (pop +doom-dashboard-functions))
;; (add-to-list '+doom-dashboard-functions 'ttk/quotes)
;; (add-to-list '+doom-dashboard-functions mybanner)

;; append it to the last
(add-to-list '+doom-dashboard-functions 'ttk/quotes t)

(cond
 (IS-SIDESTEP
  (setq doom-font                (font-spec :family "menlo" :size 12)
        doom-variable-pitch-font (font-spec :family "menlo" :size 12)
        doom-big-font            (font-spec :family "menlo" :size 18)))
 ((or IS-IGL6301W IS-IGD1943U)
  (setq doom-font                (font-spec :family "Roboto Mono" :size 12)
        doom-variable-pitch-font (font-spec :family "Roboto Mono" :size 12)
        doom-big-font            (font-spec :family "Roboto Mono" :size 18)))
 (IS-LOGE
  (setq doom-font                (font-spec :family "Input Mono Narrow" :size 12)
        doom-variable-pitch-font (font-spec :family "Input Mono Narrow" :size 12)
        doom-big-font            (font-spec :family "Input Mono Narrow" :size 18)))
 (t
  (setq doom-font                (font-spec :family "monospace" :size 12)
        doom-variable-pitch-font (font-spec :family "monospace" :size 12)
        doom-big-font            (font-spec :family "monospace" :size 18))))

(add-hook! 'org-mode-hook #'mixed-pitch-mode)
(setq mixed-pitch-variable-pitch-cursor t)

;; select theme
(cond
 (IS-IGD1943U
  (setq doom-theme 'ttk-doom-solarized-light))
 (IS-IGL6301W
  ;; (setq doom-theme 'ttk-doom-solarized-light))
  (setq doom-theme 'ttk-doom-zenburn))
 (t
  (setq doom-theme 'ttk-doom-zenburn)))

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type 'relative)
;; But I don't want to see line number in og mode
(add-hook! 'org-mode-hook #'doom-disable-line-numbers-h)

(map! :leader
      :desc "Toggle truncate lines"
      "t t" #'toggle-truncate-lines)

(use-package! rainbow-mode
  :hook (emacs-lisp-mode . rainbow-mode))

;;
;; balanced and colorful delimiters
;;     https://github.com/Fanael/rainbow-delimiters.git
;;
;; Toggle single buffer: M-x rainbow-delimiters-mode
(use-package! rainbow-delimiters
 ;; if you omit :defer, :hook, :commands, or :after, then the package is loaded
 ;; immediately. By using :hook here, the `rainblow-delimiters` package won't be loaded
 ;; until prog-mode-hook is triggered (by activating a major mode derived from
 ;; it, e.g. python-mode)
 :hook (prog-mode . rainbow-delimiters-mode)
 :init
 ;; code here will run immediately
 :config
 ;; code here will run after the package is loaded
)

;;(add-hook 'window-setup-hook #'doom/quickload-session)

(use-package! doom-modeline
 :init
 (setq doom-modeline-percent-position nil ; dunwan buffer % at segment buffer-position
       doom-modeline-project-detection 'projectile ; how to detect project root
       doom-modeline-buffer-file-name-style 'buffer-name ; uniquify buffer name
       doom-modeline-workspace-name nil                  ; need eyebrowse
       doom-modeline-persp-name t                        ; workspace using persp-mode
       doom-modeline-display-default-persp-name t        ; workspace using persp-mode
       doom-modeline-persp-icon nil                      ; workspace using persp-mode
   )
 :config
  ;; See list of doom-modeline-def-segment in doom-modeline-segments.el
  (doom-modeline-def-modeline 'ttk/my-simple-line
   '(bar vcs persp-name buffer-info-simple major-mode minor-modes buffer-position)
   '(selection-info misc-info))
  ;; Add to `doom-modeline-mode-hook` or other hooks
  (defun setup-custom-doom-modeline ()
   (doom-modeline-set-modeline 'ttk/my-simple-line t))
  (add-hook 'doom-modeline-mode-hook 'setup-custom-doom-modeline)
)

;;
;; which-function-mode
;;
(if nil
    (which-function-mode 1) ; enable for all modes
  (progn                    ; enable for certain modes
    (require 'which-func)
    (eval-after-load "which-func-modes"
     '(setq which-func-modes '(c-mode cc-mode c++-mode java-mode org-mode python-mode)))
    (which-func-mode 1)))

(setq-default
 ;; %H is the hour on a 24-hour clock
 ;; %I is on a 12-hour clock
 ;; %k is like %H only blank-padded
 ;; %l is like %I blank-padded.
 ;; %M is the minute
 ;; %S is the second
 display-time-default-load-average nil
 display-time-format "%p%I:%M"
 ;; display-time-format "%H:%M"
 display-time-interval 60               ; update every 60 sec
 display-time-default-load-average nil  ; don't show load average
 )
 ;; display clock in modeline
 (display-time-mode t)

;; shrink-whitespace.el
;;     https://github.com/jcpetkovich/shrink-whitespace.el.git
;;
;; delete blank lines and shrink whitespace
(use-package! shrink-whitespace
 :defer t
 :bind (("M-\\" . shrink-whitespace)))

(after! smartparens
  (defun zz/goto-match-paren (arg)
    "Go to the matching paren/bracket, otherwise (or if ARG is not
    nil) insert %.  vi style of % jumping to matching brace."
    (interactive "p")
    (if (not (memq last-command '(set-mark
                                  cua-set-mark
                                  zz/goto-match-paren
                                  down-list
                                  up-list
                                  end-of-defun
                                  beginning-of-defun
                                  backward-sexp
                                  forward-sexp
                                  backward-up-list
                                  forward-paragraph
                                  backward-paragraph
                                  end-of-buffer
                                  beginning-of-buffer
                                  backward-word
                                  forward-word
                                  mwheel-scroll
                                  backward-word
                                  forward-word
                                  mouse-start-secondary
                                  mouse-yank-secondary
                                  mouse-secondary-save-then-kill
                                  move-end-of-line
                                  move-beginning-of-line
                                  backward-char
                                  forward-char
                                  scroll-up
                                  scroll-down
                                  scroll-left
                                  scroll-right
                                  mouse-set-point
                                  next-buffer
                                  previous-buffer
                                  previous-line
                                  next-line
                                  back-to-indentation
                                  doom/backward-to-bol-or-indent
                                  doom/forward-to-last-non-comment-or-eol
                                  )))
        (self-insert-command (or arg 1))
      (cond ((looking-at "\\s\(") (sp-forward-sexp) (backward-char 1))
            ((looking-at "\\s\)") (forward-char 1) (sp-backward-sexp))
            (t (self-insert-command (or arg 1))))))
  (map! "%" 'zz/goto-match-paren))

(setq org-directory "~/org/")

(after! org (setq org-hide-emphasis-markers t))

(after! org (setq org-insert-heading-respect-content nil))

(after! org
  (setq org-log-done t)
  (setq org-log-into-drawer t))

(after! org
  (setq org-special-ctrl-a/e t)
  (setq org-special-ctrl-k t))

(after! org
  (setq org-use-speed-commands
        (lambda ()
          (and (looking-at org-outline-regexp)
               (looking-back "^\**")))))

(add-hook! org-mode (electric-indent-local-mode -1))

(add-hook! org-mode :append
           #'visual-line-mode
           #'variable-pitch-mode)

(after! org
  (setq org-agenda-files
        '("~/gtd" "~/Work/work.org.gpg" "~/org/")))

(defun zz/add-file-keybinding (key file &optional desc)
  (let ((key key)
        (file file)
        (desc desc))
    (map! :desc (or desc file)
          key
          (lambda () (interactive) (find-file file)))))

(map! :after counsel :map org-mode-map
      "C-c l l h" #'counsel-org-link)

(after! counsel
  (setq counsel-outline-display-style 'title))

(after! org-id
  ;; Do not create ID if a CUSTOM_ID exists
  (setq org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id))

(defun zz/make-id-for-title (title)
  "Return an ID based on TITLE."
  (let* ((new-id (replace-regexp-in-string "[^[:alnum:]]" "-" (downcase title))))
    new-id))

(defun zz/org-custom-id-create ()
  "Create and store CUSTOM_ID for current heading."
  (let* ((title (or (nth 4 (org-heading-components)) ""))
         (new-id (zz/make-id-for-title title)))
    (org-entry-put nil "CUSTOM_ID" new-id)
    (org-id-add-location new-id (buffer-file-name (buffer-base-buffer)))
    new-id))

(defun zz/org-custom-id-get-create (&optional where force)
  "Get or create CUSTOM_ID for heading at WHERE.

If FORCE is t, always recreate the property."
  (org-with-point-at where
    (let ((old-id (org-entry-get nil "CUSTOM_ID")))
      ;; If CUSTOM_ID exists and FORCE is false, return it
      (if (and (not force) old-id (stringp old-id))
          old-id
        ;; otherwise, create it
        (zz/org-custom-id-create)))))

;; Now override counsel-org-link-action
(after! counsel
  (defun counsel-org-link-action (x)
    "Insert a link to X.

X is expected to be a cons of the form (title . point), as passed
by `counsel-org-link'.

If X does not have a CUSTOM_ID, create it based on the headline
title."
    (let* ((id (zz/org-custom-id-get-create (cdr x))))
      (org-insert-link nil (concat "#" id) (car x)))))

(after! org-agenda
  (setq org-agenda-prefix-format
        '((agenda . " %i %-12:c%?-12t% s")
          ;; Indent todo items by level to show nesting
          (todo . " %i %-12:c%l")
          (tags . " %i %-12:c")
          (search . " %i %-12:c")))
  (setq org-agenda-include-diary t))

(use-package! org-super-agenda
  :after org-agenda
  :config
  (setq org-super-agenda-groups '((:auto-dir-name t)))
  (org-super-agenda-mode))

(use-package! org-archive
  :after org
  :config
  (setq org-archive-location "archive.org::datetree/"))

(after! org-clock
  (setq org-clock-persist t)
  (org-clock-persistence-insinuate))

(after! (org-gtd org-capture)
  (add-to-list 'org-capture-templates
               '("i" "GTD item"
                 entry
                 (file (lambda () (org-gtd--path org-gtd-inbox-file-basename)))
                 "* %?\n%U\n\n  %i"
                 :kill-buffer t))
  (add-to-list 'org-capture-templates
               '("l" "GTD item with link to where you are in emacs now"
                 entry
                 (file (lambda () (org-gtd--path org-gtd-inbox-file-basename)))
                 "* %?\n%U\n\n  %i\n  %a"
                 :kill-buffer t))
  (add-to-list 'org-capture-templates
               '("m" "GTD item with link to current Outlook mail message"
                 entry
                 (file (lambda () (org-gtd--path org-gtd-inbox-file-basename)))
                 "* %?\n%U\n\n  %i\n  %(org-mac-outlook-message-get-links)"
                 :kill-buffer t)))

(defadvice! +zz/load-org-gtd-before-capture (&optional goto keys)
    :before #'org-capture
    (require 'org-capture)
    (require 'org-gtd))

(use-package! ox-awesomecv
  :after org)
(use-package! ox-moderncv
  :after org)

(use-package! ox-leanpub
  :after org
  :config
  (require 'ox-leanpub-markdown)
  (org-leanpub-book-setup-menu-markdown))

(after! ox-hugo
  (setq org-hugo-use-code-for-kbd t))

(defun zz/org-if-str (str &optional desc)
  (when (org-string-nw-p str)
    (or (org-string-nw-p desc) str)))

(defun zz/org-macro-hsapi-code (module &optional func desc)
  (org-link-make-string
   (concat "https://www.hammerspoon.org/docs/"
           (concat module (zz/org-if-str func (concat "#" func))))
   (or (org-string-nw-p desc)
       (format "=%s="
               (concat module
                       (zz/org-if-str func (concat "." func)))))))

(defun zz/org-macro-keys-code-outer (str)
  (mapconcat (lambda (s)
               (concat "~" s "~"))
             (split-string str)
             (concat (string ?\u200B) "+" (string ?\u200B))))
(defun zz/org-macro-keys-code-inner (str)
  (concat "~" (mapconcat (lambda (s)
                           (concat s))
                         (split-string str)
                         (concat (string ?\u200B) "-" (string ?\u200B)))
          "~"))
(defun zz/org-macro-keys-code (str)
  (zz/org-macro-keys-code-inner str))

(defun zz/org-macro-luadoc-code (func &optional section desc)
  (org-link-make-string
   (concat "https://www.lua.org/manual/5.3/manual.html#"
           (zz/org-if-str func section))
   (zz/org-if-str func desc)))

(defun zz/org-macro-luafun-code (func &optional desc)
  (org-link-make-string
   (concat "https://www.lua.org/manual/5.3/manual.html#"
           (concat "pdf-" func))
   (zz/org-if-str (concat "=" func "()=") desc)))

(defun zz/org-reformat-buffer ()
  (interactive)
  (when (y-or-n-p "Really format current buffer? ")
    (let ((document (org-element-interpret-data (org-element-parse-buffer))))
      (erase-buffer)
      (insert document)
      (goto-char (point-min)))))

(use-package org-pandoc-import)

(use-package! org-ml
  :after org)

(after! org
  ;; Project Tree
  (setq org-publish-project-alist
   '(;;
     ;; SSDC project
     ;;
     ("ssdc-notes"
       :base-directory "~/project/ssdc/org/"
       :base-extension "org"
       :publishing-directory "~/project/ssdc/bo/html/"
       :recursive t
       :publishing-function org-html-publish-to-html
       :headline-levels 4             ; Just the default for this project.
       :auto-preamble t)
     ("ssdc-static"
       :base-directory "~/project/ssdc/org/"
       :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
       :publishing-directory "~/project/ssdc/bo/html/"
       :recursive t
       :publishing-function org-publish-attachment)
     ("ssdc-org-html-themes"
       :base-directory "~/project/org-html-themes/src/"
       :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
       :publishing-directory "~/project/ssdc/bo/html/src/"
       :recursive t
       :publishing-function org-publish-attachment)
     ("ssdc-org" :components ("ssdc-notes" "ssdc-static" "ssdc-org-html-themes"))
     ;;
     ;; CISSP project
     ;;
     ("cissp-notes"
      :base-directory "~/project/cissp/org/"
      :base-extension "org"
      :publishing-directory "~/project/cissp/bo/html/"
      :recursive t
      :publishing-function org-html-publish-to-html
      :headline-levels 4             ; Just the default for this project.
      :auto-preamble t)
    ("cissp-static"
      :base-directory "~/project/cissp/org/"
      :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
      :publishing-directory "~/project/cissp/bo/html/"
      :recursive t
      :publishing-function org-publish-attachment)
    ("cissp-org-html-themes"
      :base-directory "~/project/org-html-themes/styles/"
      :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
      :publishing-directory "~/project/cissp/bo/html/styles/"
      :recursive t
      :publishing-function org-publish-attachment)
    ("cissp-org" :components ("cissp-notes" "cissp-static" "cissp-org-html-themes"))
    ;;
    ;; CTDC project
    ;;
    ("ctdc-notes"
      :base-directory "~/project/conti/ctdc/org/"
      :base-extension "org"
      :publishing-directory "~/project/conti/ctdc/bo/html/"
      :recursive t
      :publishing-function org-html-publish-to-html
      :headline-levels 4             ; Just the default for this project.
      :auto-preamble t)
    ("ctdc-static"
      :base-directory "~/project/conti/ctdc/org/"
      :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
      :publishing-directory "~/project/conti/ctdc/bo/html/"
      :recursive t
      :publishing-function org-publish-attachment)
    ("ctdc-org-html-themes"
      :base-directory "~/project/conti/org-html-themes/src/"
      :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
      :publishing-directory "~/project/conti/ctdc/bo/html/src/"
      :recursive t
      :publishing-function org-publish-attachment)
    ("ctdc-org" :components ("ctdc-notes" "ctdc-static" "ctdc-org-html-themes"))
    ;;
    ;; dotdoomemacs project
    ;;
    ("dotdoomemacs-notes"
      :base-directory "~/project/dotdoomemacs/"
      :base-extension "org"
      :publishing-directory "~/project/dotdoomemacs/bo/html/"
      :recursive t
      :publishing-function org-html-publish-to-html
      :headline-levels 4             ; Just the default for this project.
      :auto-preamble t)
    ("dotdoomemacs-static"
      :base-directory "~/project/dotdoomemacs/"
      :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
      :publishing-directory "~/project/dotdoomemacs/bo/html/"
      :recursive t
      :publishing-function org-publish-attachment)
    ("dotdoomemacs-org-html-themes"
      :base-directory "~/project/org-html-themes/src/"
      :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
      :publishing-directory "~/project/dotdoomemacs/bo/html/src/"
      :recursive t
      :publishing-function org-publish-attachment)
    ("dotdoomemacs-org" :components ("dotdoomemacs-notes" "dotdoomemacs-static" "dotdoomemacs-org-html-themes"))
    ))
  ;; Source code block evaluated during export. I don't want to be asked everytime :)
  (setq org-confirm-babel-evaluate nil)
  )

(add-hook! org-mode :append
  (add-hook! after-save :append :local #'org-babel-tangle))

(use-package! cfengine
  :defer t
  :commands cfengine3-mode
  :mode ("\\.cf\\'" . cfengine3-mode))

;;
(defconst my-c-style
  '((c-tab-always-indent        . t)
    (c-comment-only-line-offset . 0) ;; 4
    (c-hanging-braces-alist     . ((substatement-open after)
                                  (brace-list-open)))
    (c-hanging-colons-alist     . ((member-init-intro before)
                                  (inher-intro)
                                  (case-label after)
                                  (label after)
                                  (access-label after)))
    (c-cleanup-list             . (scope-operator
                                  empty-defun-braces
                                  defun-close-semi))
    (c-offsets-alist            . ((arglist-close . c-lineup-arglist)
                                  (substatement-open . 0)
                                  (case-label        . 3) ;; 0 ;; 4
                                  (block-open        . 0)
                                  (knr-argdecl-intro . -)))
    (c-echo-syntactic-information-p . t))
  "My C Programming Style")
;;
(defconst ct-c-style
  '(;; gnu        : coding style blessed by FSF for C code in  GNU programs
    ;; stroustrup : the classic Stroustrup style for C++ code.
    ;; linux      : C coding standard for Linux (the kernel).
    ;; user       : special style created by you. It consists of the factory defaults for
    ;;              all the style variables as modified by the customizations.
    (setq c-default-style '((java-mode . "java")
                            (awk-mode  . "awk")
                            (c-mode    . "user")
                            (c++-mode  . "user")
                            (other     . "user")))
    ;; this is for linux kernel and driver project
    (c-set-style (if (and (buffer-file-name)
                          (string-match "~/project/linux" (buffer-file-name)))
                    "linux"
                  "user"))
    (c-tab-always-indent        . t)
    (c-comment-only-line-offset . 0) ;; 4
    (c-hanging-braces-alist     . ((substatement-open after)
                                  (brace-list-open)))
    (c-hanging-colons-alist     . ((member-init-intro before)
                                  (inher-intro)
                                  (case-label after)
                                  (label after)
                                  (access-label after)))
    (c-cleanup-list             . (scope-operator
                                  empty-defun-braces
                                  defun-close-semi))
    (c-offsets-alist            . ((arglist-close . c-lineup-arglist)
                                  (substatement-open . 0)
                                  (case-label        . 4) ;; 0 ;; 3
                                  (block-open        . 0)
                                  (knr-argdecl-intro . -)))
    (c-echo-syntactic-information-p . t))
  "CT C Programming Style")
;;
;; Customizations for all of modes in CC mode
;;
;; ct hook
(defun ct-c-mode-common-hook ()
  ;; add ct style and set it for the current buffer
  (c-add-style "CT" ct-c-style t)
  ;; offset customizations not in ct-c-style
  (c-set-offset 'member-init-intro '++)
  ;; treat '_' as a word constituent
  (modify-syntax-entry ?_ "w")
  ;; local binding
  ;; (local-set-key (kbd "C-<") 'c-up-conditional-with-else)
  ;; (local-set-key (kbd "C->") '(lambda (count) (interactive "p") (c-up-conditional-with-else (- count))))
  ;; other customizations
  (setq tab-width 4
        c-basic-offset 4
        c-indent-level 4
        indent-tabs-mode nil ; nil uses space, t uses tab
        )
  ;; we like auto-newline and hungry-delete
  ;; (c-toggle-auto-hungry-state 1)
  ;; keybindings for all supported languages.  We can put these in
  ;; c-mode-base-map because c-mode-map, c++-mode-map, objc-mode-map,
  ;; java-mode-map, and idl-mode-map inherit from it.
  ;; (define-key c-mode-base-map "\C-m" 'newline-and-indent)
  )
;;
;; apply which one to use
(add-hook 'c-mode-common-hook 'ct-c-mode-common-hook)
;; files *.ipp is c++ source code in UPA
(setq auto-mode-alist (cons '("\\.ipp$" . c++-mode) auto-mode-alist))

(map! :after cc-mode
      :map (c-mode-map c++-mode-map)
      :localleader
      :prefix "d"    ;; "c" already taken by ccls-show-caller: modules/lang/cc/config.el
        "<" 'c-up-conditional-with-else
        ">" '(lambda (count) (interactive "p") (c-up-conditional-with-else (- count)))
        "A" 'c-beginning-of-defun
        "E" 'c-end-of-defun
        "a" 'c-beginning-of-statement
        "e" 'c-end-of-statement)

(use-package! xcscope
  :after prog-mode
  :init
  (setq cscope-do-not-update-database t
        cscope-edit-single-match nil)
  :config
  ;; let cscope minor modes key binding takes priority over evil key bindings
  (evil-make-overriding-map cscope-list-entry-keymap 'normal)
  ;; force update evil keymaps after cscope-list-entry-mode loaded
  (add-hook 'cscope-list-entry-hook #'evil-normalize-keymaps))

(map! :after cc-mode
      :map (c-mode-map c++-mode-map)
      :localleader
      :prefix "s"
      "s" #'cscope-find-this-symbol
      "d" #'cscope-find-global-definition
      "c" #'cscope-find-functions-calling-this-function
      "C" #'cscope-find-called-functions
      "i" #'cscope-find-files-including-file
      "b" #'cscope-display-buffer
      "u" #'cscope-pop-mark
      "a" #'cscope-set-initial-directory
      "A" #'cscope-unset-initial-directory)

(after! projectile
 ;; alien method need external utility (unixes), and fast.
 ;; it ignores the content of .projectile, but read .gitignore
 ;; totok 11-nov-2018: new method by default: turbo-alien
 ;; (setq projectile-indexing-method 'alien) ; long live 'ripgrep'
 ;; native method is portable but slow. it reads the content of .projectile
 ;; (setq projectile-indexing-method 'native)
 (setq projectile-enable-caching t)
 ;; disable remote file exists cache
 ;;(setq projectile-file-exists-remote-cache-expire nil)
 ;; enable remote file exists cache 10 minutes
 (setq projectile-file-exists-remote-cache-expire (* 10 60))
 ;; change default display on modeline (don't do it for spacemacs)
 ;;(setq projectile-mode-line '(:eval (format " P:%s" (projectile-project-name))))
 ;;; by default, doom emacs use ivy
 ;;(setq projectile-completion-system 'ivy) ; it's nice (from swiper package)
 ;; tell projectile to not try and find the file on the remote SVN server and
 ;; instead search locally, see https://github.com/bbatsov/projectile/issues/520
 (setq projectile-svn-command "find . -type f -not -iwholename '*.svn/*' -print0")
 ;; require presence of project root, otherwise current directory is the project root
 ;; other options: 'prompt or nil
 (setq projectile-require-project-root t)
 ;; don't want automatic project detection, ie i want manually a project
 ;; by a function called projectile-add-known-project, bound to "SPC p a"
 (setq projectile-track-known-projects-automatically nil)
 ;;
 ;; But doesn't work with indexing method alien nor turbo-alien
 ;; nvm, use rg to index and ignored directories put inside .rgignore
 (with-eval-after-load 'projectile
   (add-to-list 'projectile-project-root-files-bottom-up ".repo")
   ;; ignored directories
   (add-to-list 'projectile-globally-ignored-directories "tests")
   ;; ignored files
   (add-to-list 'projectile-globally-ignored-file-suffixes ".d")
   (add-to-list 'projectile-globally-ignored-file-suffixes ".o")
   )
 ;;
 ;; Use ripgrep to index files to be used by projectile
 ;; See: https://emacs.stackexchange.com/questions/16497/how-to-exclude-files-from-projectile/16499
 ;;
 ;; Default rg arguments
 ;; https://github.com/BurntSushi/ripgrep
 (when (executable-find "rg")
   (message "Projectile use rg to generate project files.")
   (progn
     (defconst ttk/rg-arguments
       `("--line-number"                     ; line numbers
         "--smart-case"
         "--follow"                          ; follow symlinks
         "--mmap")                           ; apply memory map optimization when possible
       "Default rg arguments used in the functions in `projectile' package.")
     ;;
     (defun ttk/advice-projectile-use-rg (&rest _args)
       "Always use `rg' for getting a list of all files in the project."
       (let* ((prj-user-ignore-name (expand-file-name
                                     (concat ".ignore." user-login-name)
                                     (projectile-project-root)))
              (prj-user-ignore (when (file-exists-p prj-user-ignore-name)
                                 (concat "--ignore-file " prj-user-ignore-name))))
         (mapconcat #'shell-quote-argument
                    (if prj-user-ignore
                        (append '("rg")
                                ttk/rg-arguments
                                `(,prj-user-ignore)
                                '("--null" ;Output null separated results
                                  ;; Get names of all the to-be-searched files,
                                  ;; same as the "-g ''" argument in ag.
                                  "--files"))
                      (append '("rg")
                              ttk/rg-arguments
                              '("--null"
                                "--files")))
                    " ")))
     (advice-add 'projectile-get-ext-command :override #'ttk/advice-projectile-use-rg)))
)

;; see doom-emacs/modules/lang/plantuml/packages.el
(use-package! plantuml-mode
  :init
  ;; enable plantuml-mode for PlantUML files
  (setq auto-mode-alist (cons '("\\.plantuml$" . plantuml-mode) auto-mode-alist))
  (setq auto-mode-alist (cons '("\\.uml$"      . plantuml-mode) auto-mode-alist))
  (setq plantuml-default-exec-mode 'jar
        ;; plantuml-jar-path "~/project/dotdoomemacs/plantuml/plantuml.jar"
        plantuml-jar-path (format "%s/plantuml/plantuml.jar" (getenv "DOOMDIR"))
        ;; org-plantuml-jar-path "~/project/dotdoomemacs/plantuml/plantuml.jar"
        org-plantuml-jar-path (format "%s/plantuml/plantuml.jar" (getenv "DOOMDIR"))
        plantuml-indent-level 3
        ;; we can save *PLANTUML Preview* buffer to a file with command
        ;; 'M-x save-buffer'. Supported format: "svg", "png", "txt" (ascii art)
        plantuml-output-type "svg"))

(use-package! graphviz-dot-mode)

(use-package! lsp
  :init
  ;;
  ;; For general LSP, you need :tools lsp
  ;;
  (setq ;; lsp-auto-configure nil        ; to configure only features u like
        lsp-prefer-flymake nil        ; prefer lsp-ui (flycheck) over flymake
        ;; lsp-auto-execute-action nil
        ;;
        lsp-navigation 'simple
        ;; this is also too noisy
        lsp-ui-doc-enable nil
        lsp-ui-sideline-enable nil
        lsp-ui-sideline-show-symbol nil
        lsp-ui-sideline-show-diagnostics nil
        lsp-ui-sideline-show-hover nil
        lsp-ui-sideline-show-code-actions nil
        lsp-ui-sideline-update-mode nil
        lsp-ui-peek-enable nil
        lsp-ui-peek-show-directory nil
        lsp-ui-flycheck-enable nil
        lsp-ui-flycheck-live-reporting nil
        lsp-ui-imenu-enable nil
        ;;
        ;; see https://emacs-lsp.github.io/lsp-mode/tutorials/how-to-turn-off/
        ;; let's kill them all
        lsp-enable-symbol-highlighting nil   ; symbol highlighting
        lsp-enable-snippet nil               ; handle yasnippet by myself
        lsp-ui-doc-show-with-cursor nil      ; cursor hover
        lsp-ui-doc-show-with-mouse nil       ; mouse hover
        lsp-lens-enable nil                  ; lens
        lsp-headerline-breadcrumb-enable nil ; headerline
        lsp-modeline-code-actions-enable nil ; modeline code actions
        lsp-diagnostics-provider :none
        lsp-modeline-diagnostics-enable nil    ; modeline diagnostics statistics
        lsp-eldoc-hook nil                     ; eldoc
        lsp-eldoc-enable-hover nil             ; eldoc
        lsp-signature-auto-activate nil        ; manually: `lsp-signature-activate'
        lsp-signature-render-documentation nil ; signature help documentation
        lsp-completion-enable t                ; see how is performance
        lsp-completion-provider :ivy           ; long live ivy
        ;; lsp-completion-show-detail nil         ; completion item detail
        ;; lsp-completion-show-kind nil           ; completion item kind
        ;;
        ;; http://blog.binchen.org/posts/how-to-speed-up-lsp-mode/
        lsp-log-io nil                ; enable log only for debug
        lsp-enable-folding nil        ; use evil-matchit' instead
        ;; lsp-enable-links nil          ; use ffip instead
  )
  ;;
  ;; For python, you need to add :lang (python +lsp)
  ;;
  (setq python-backend 'lsp
        python-lsp-server 'pyls
        ;; python-tab-width 4
        python-fill-column 149
        python-formatter 'yapf
        python-format-on-save nil
        python-sort-imports-on-save t
        python-pipenv-activate t
        ;; disable these plugins, too noisy
        lsp-pyls-plugins-pycodestyle-enabled nil
        lsp-pyls-plugins-mccabe-enabled nil
        ;; enable back if you want
        lsp-pyls-plugins-pylint-enabled nil
        lsp-pyls-plugins-autopep8-enabled nil
        lsp-pyls-plugins-yapf-enabled nil
        lsp-pyls-plugins-pyflakes-enabled nil
        lsp-pyls-plugins-flake8-enabled nil
        lsp-pyls-plugins-pydocstyle-enabled nil
  )
)

(after! company
 (setq company-backends '(company-capf
                          company-keywords
                          company-semantic
                          company-files
                          company-etags
                          company-elisp
                          company-clang
                          ;; company-irony-c-headers
                          ;; company-irony
                          ;; company-jedi
                          company-cmake
                          company-ispell
                          company-yasnippet))
 (setq company-idle-delay 0
       company-echo-delay 0
       company-minimum-prefix-length 2
       company-show-numbers t
       company-tooltip-limit 20
       company-dabbrev-downcase nil)
 ;; make aborting less annoying
 (add-hook 'evil-normal-state-entry-hook #'company-abort)

;;  ;; using digits to select company-mode candidates
;;  ;; https://oremacs.com/2017/12/27/company-numbers/
;;  ;; add some bindings
;;  (let ((map company-active-map))
;;    (mapc (lambda (x) (define-key map (format "%d" x) 'ora-company-number))
;;    (number-sequence 0 9))
;;    (define-key map " " (lambda ()
;;                          (interactive)
;;                          (company-abort)
;;                          (self-insert-command 1)))
;;    (define-key map (kbd "<return>") nil)
;;    )
;;  ;; actual code
;;  (defun ora-company-number ()
;;   "Forward to `company-complete-number'.
;;
;; Unless the number is potentially part of the candidate.
;; In that case, insert the number."
;;   (interactive)
;;   (let* ((k (this-command-keys))
;;         (re (concat "^" company-prefix k)))
;;     (if (cl-find-if (lambda (s) (string-match re s))
;;                     company-candidates)
;;         (self-insert-command 1)
;;       (company-complete-number
;;       (if (equal k "0")
;;           10
;;         (string-to-number k))))))
;;   ;;
;;   ;; end of using digits to select company-mode candidates
;;   ;;
 )

(after! epa
  (set (if EMACS27+
           'epg-pinentry-mode
         'epa-pinentry-mode) ; DEPRECATED `epa-pinentry-mode'
       nil))

(defmacro zz/measure-time (&rest body)
  "Measure the time it takes to evaluate BODY."
  `(let ((time (current-time)))
     ,@body
     (float-time (time-since time))))

;; To get the full path of current buffer and put it in kill-ring
;;
(defun ttk/copy-full-path-to-kill-ring ()
  "copy buffer's full path to kill ring"
  (interactive)
  (when buffer-file-name
    (kill-new (file-truename buffer-file-name))))

;; insert date into buffer
;;
(defun ttk/insert-date ()
 "Insert date at point."
 (interactive)
 (insert (format-time-string "%a %e-%b-%Y %l:%M%p")))

(defun ttk/ascii-table()
  "Display basic ASCII table (0 thru 128)."
  (interactive)
  (switch-to-buffer "*ASCII*")
  (erase-buffer)
  (setq buffer-read-only nil)        ;; Not need to edit the content, just read mode (added)
  ;; (local-set-key "q" 'bury-buffer)   ;; Nice to have the option to bury the buffer (added)
  (save-excursion (let ((i -1))
    (insert "ASCII characters 0 thru 127.\n\n")
    (insert " Hex  Dec  Char|  Hex  Dec  Char|  Hex  Dec  Char|  Hex  Dec  Char\n")
    (while (< i 31)
      (insert (format "%4x %4d %4s | %4x %4d %4s | %4x %4d %4s | %4x %4d %4s\n"
                      (setq i (+ 1  i)) i (single-key-description i)
                      (setq i (+ 32 i)) i (single-key-description i)
                      (setq i (+ 32 i)) i (single-key-description i)
                      (setq i (+ 32 i)) i (single-key-description i)))
      (setq i (- i 96))))))

(after! ivy
 (setq ivy-height 16
       ivy-count-format "(%d/%d)"    ; display the current and total number in the collection
       counsel-git-cmd "rg --files"
       ;; already defined in doom emacs config
       ;counsel-rg-base-command "rg -i -M 120 --no-heading --line-number --color never %s ."
       ;; https://oremacs.com/2017/08/04/ripgrep/
       counsel-grep-base-command "rg -i -M 120 --no-heading --line-number --color never '%s' %s"
       )
 ;; i don't like dir buffer.
 (define-key ivy-minibuffer-map (kbd "RET") 'ivy-alt-done)
 )

(map! "M-g g" #'avy-goto-line)
(map! "M-g M-g" #'avy-goto-line)

;; see ~/.emacs.d/modules/editor/evil/config.el
(map! :after evil-easymotion
      :map evilem-map
      "l" #'avy-goto-line
      "p" #'avy-pop-mark)

(after! evil-mc
  (add-to-list 'evil-mc-incompatible-minor-modes 'lispy-mode)
  (add-to-list 'evil-mc-incompatible-minor-modes 'yas-minor-mode))
